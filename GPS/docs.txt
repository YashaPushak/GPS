## Setup Arguments

These are general GPS arguments that are used to set up the GPS run.

### temp_dir

<table>
<tr> <td> <b> Description </b> </td> <td> The directory for GPS to use to write temporary files to. By default, GPS will write all temporary files to the current working directory (i.e., the experiment-dir. GPS will also clean up all such temporary files when it is done with them, unless GPS crashes unexpectedly. GPS will create a single temporary file for every target algorithm run, which means that it will create and delete and large number of these files. It is therefore strongly recommended to use a directory with a fast filesystem that is not automatically backed up. In some cases, GPS and other algorithm configurators with similar behaviour have been known to unneccesarily stress file systems with automatic back-ups due to the volume of temporary files created and deleted. If this happens, the quality of the configurations found with GPS (when using a wall clock budget) may suffer substantially, as well as any other person or system that interacts with the filesystem. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> . </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --temp-dir </code>, <code> --temp_dir </code>, <code> --tempDir </code>, <code> --temp </code>, <code> --temporary-directory </code>, <code> --temporary_directory </code>, <code> --temporaryDirectory </code> </td> </tr>
</table>

### experiment_dir

<table>
<tr> <td> <b> Description </b> </td> <td> The root directory from which experiments will be run. By default, this is the current working directory. GPS will change to this directory prior to running, this means that if relative paths are specified for any other files or directories then they must be given relative to your experiment directory. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> . </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --experiment-dir </code>, <code> --experiment_dir </code>, <code> --experimentDir </code>, <code> -e </code> </td> </tr>
</table>

### scenario_file

<table>
<tr> <td> <b> Description </b> </td> <td> The scenario file (and location) that defines what settings are used for GPS. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --scenario-file </code>, <code> --scenario_file </code>, <code> --scenarioFile </code> </td> </tr>
</table>

### output_dir

<table>
<tr> <td> <b> Description </b> </td> <td> The directory where output will be stored. The actual directory for a particularGPS run with ID gps_id will be stored in {experiment-dir}/{output-dir}/gps-run-{gps_id} </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> gps-output </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --output-dir </code>, <code> --output_dir </code>, <code> --outputDir </code>, <code> --output-directory </code>, <code> --output_directory </code>, <code> --outputDirectory </code>, <code> --out-dir </code>, <code> --out_dir </code>, <code> --outDir </code>, <code> --log-location </code>, <code> --log_location </code>, <code> --logLocation </code> </td> </tr>
</table>

### verbose

<table>
<tr> <td> <b> Description </b> </td> <td> Controls the verbosity of GPS's output. Set of 0 for warnings only. Set to 1 for more informative messages. And set to 2 for debug-level messages. The default is 1. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 1 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --verbose </code>, <code> --verbosity </code>, <code> --log-level </code>, <code> --log_level </code>, <code> --logLevel </code>, <code> -v </code> </td> </tr>
</table>

## Scenario Arguments

These arguments define the scenario-specific information.

### algo

<table>
<tr> <td> <b> Description </b> </td> <td> The command line string used to execute the target algorithm </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --algo </code>, <code> --algo-exec </code>, <code> --algo_exec </code>, <code> --algoExec </code>, <code> --algorithm </code>, <code> --wrapper </code> </td> </tr>
</table>

### instance_file

<table>
<tr> <td> <b> Description </b> </td> <td> The file (and location) containing the names (and locations) of the instances to be used to evaluate the target algorithm's configurations. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --instance-file </code>, <code> --instance_file </code>, <code> --instanceFile </code>, <code> --instances </code>, <code> -i </code> </td> </tr>
</table>

### wallclock_limit

<table>
<tr> <td> <b> Description </b> </td> <td> Limits the total wall-clock time used by GPS, in seconds. Either this, the runcount  or the CPU time limit must be less than the maximum integer value. The default is the maximum integer value. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 2147483647.0 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --wallclock-limit </code>, <code> --wallclock_limit </code>, <code> --wallclockLimit </code>, <code> --runtime-limit </code>, <code> --runtime_limit </code>, <code> --runtimeLimit </code> </td> </tr>
</table>

### cputime_limit

<table>
<tr> <td> <b> Description </b> </td> <td> Limits the total CPU time used by the target algorithm, in seconds. Either this, the runcount or the wallclock limit must be less than the maximum integer value. The default is the maximum integer value. NOTE: Unlike SMAC, this does not include the CPU time spent by GPS -- this only adds the running times reported by your target algorithm wrapper and terminates GPS once they have exceeded this limit. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 2147483647.0 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --cputime-limit </code>, <code> --cputime_limit </code>, <code> --cputimeLimit </code>, <code> --tunertime-limit </code>, <code> --tunertime_limit </code>, <code> --tunertimeLimit </code>, <code> --tuner-timeout </code>, <code> --tuner_timeout </code>, <code> --tunerTimeout </code> </td> </tr>
</table>

### seed

<table>
<tr> <td> <b> Description </b> </td> <td> The random seed used by GPS. If -1, a random seed will be used. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> -1 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --seed </code> </td> </tr>
</table>

### runcount_limit

<table>
<tr> <td> <b> Description </b> </td> <td> Limits the total number of target algorithm runs performed by GPS. Either this, the wallclock or CPU time limit must be less than the maximum integer value. The default is the maximum integer value. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 2147483647 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --runcount-limit </code>, <code> --runcount_limit </code>, <code> --runcountLimit </code>, <code> --total-num-runs-limit </code>, <code> --total_num_runs_limit </code>, <code> --totalNumRunsLimit </code>, <code> --num-runs-limit </code>, <code> --num_runs_limit </code>, <code> --numRunsLimit </code>, <code> --number-of-runs-limit </code>, <code> --number_of_runs_limit </code>, <code> --numberOfRunsLimit </code> </td> </tr>
</table>

### algo_cutoff_time

<table>
<tr> <td> <b> Description </b> </td> <td> The CPU time limit for an individual target algorithm run, in seconds. The default is 10 minutes. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --algo-cutoff-time </code>, <code> --algo_cutoff_time </code>, <code> --algoCutoffTime </code>, <code> --target-run-cputime-limit </code>, <code> --target_run_cputime_limit </code>, <code> --targetRunCputimeLimit </code>, <code> --cutoff-time </code>, <code> --cutoff_time </code>, <code> --cutoffTime </code>, <code> --cutoff </code> </td> </tr>
</table>

### pcs_file

<table>
<tr> <td> <b> Description </b> </td> <td> The file that contains the algorithm parameter configuration space in PCS format. GPS supports a subset of the syntax used for SMAC and ParamILS. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --pcs-file </code>, <code> --pcs_file </code>, <code> --pcsFile </code>, <code> --param-file </code>, <code> --param_file </code>, <code> --paramFile </code>, <code> --p </code> </td> </tr>
</table>

## GPS Parameters

These are the parameters of GPS itself. You can use these to modify GPS to best suit your scenario, if desired. Given a sufficiently large budget and a broad range of scenarios, you could even use GPS to automatically configure itself.

### bound_multiplier

<table>
<tr> <td> <b> Description </b> </td> <td> The bound multiple used for adaptive capping. Should be 'adaptive', False or a positive, real number. We strongly recommend always setting it to 'adaptive'. Using a value of 2 as is often done in other configurators is known to be overly aggressive, and will frequently result in high-quality configurations that are incorrectly rejected. This will cause GPS to eliminate large swaths of the configuration space, possibly eliminating all high-quality configurations. If you believe that the running time distribution of your algorithm has substantially heavier tails than an exponential distribution, then you could set this to a large positive integer, e.g., 200. However, with a value so large you might as well disable adaptive capping by setting it to False. The default is 'adaptive'. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> adaptive </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --bound-multiplier </code>, <code> --bound_multiplier </code>, <code> --boundMultiplier </code>, <code> --bound-mult </code>, <code> --bound_mult </code>, <code> --boundMult </code> </td> </tr>
</table>

### instance_increment

<table>
<tr> <td> <b> Description </b> </td> <td> The instance increment controls the number of instances that are queued at one time. By increasing this value GPS will effectively operate on batches of instIncr instances at one time for its intensification and queuing mechanisms. This can help to make better use of large amounts of parallel resources if the target algorithm runs can be performed very quickly and/or there are few parameters to be optimized. The instance increment must be a positive Fibonacci number. GPS will also dynamically update the value for the instance increment if it observes that there are too few tasks in the queue to keep the workers busy, or if there are too many tasks in the queue for the workers to keep up. The default is 1. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 1 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --instance-increment </code>, <code> --instance_increment </code>, <code> --instanceIncrement </code>, <code> --instance-incr </code>, <code> --instance_incr </code>, <code> --instanceIncr </code> </td> </tr>
</table>

### sleep_time

<table>
<tr> <td> <b> Description </b> </td> <td> When there the master or worker processes are blocked waiting for new results/tasks to be pushed to the database, they will sleep for this amount of time, measured in CPU seconds.The default is 0. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 0.0 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --sleep-time </code>, <code> --sleep_time </code>, <code> --sleepTime </code> </td> </tr>
</table>

### minimum_workers

<table>
<tr> <td> <b> Description </b> </td> <td> GPS must use at least two processes to run: the master process, which loops through each parameter checking for updates and queuing runs; and at least one worker process, which perform target algorithm runs. By default, GPS's master process will setup the scenario files and then wait until it has received a notification that at least one worker is ready to begin. GPS does not count any time while waiting towards its total configuration budget. This parameter controls the minimum number of workers that need to be ready in order for GPS's master process to start. Note that it does not place any restriction on the maximum number of workers. If you set this value to 1, you can still point an unlimitted number of workers to the same GPS ID and they will run. This parameter is only used when starting GPS. If some or all of the workers crash crash unexpectedly, the master process will continue running until it has exhausted its configuration budget (which may be never if the configuration budget is based on the maximum number of target algorithm runs). This must be a non-negative integer. The default is 1. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 1 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --minimum-workers </code>, <code> --minimum_workers </code>, <code> --minimumWorkers </code>, <code> --min-workers </code>, <code> --min_workers </code>, <code> --minWorkers </code> </td> </tr>
</table>

### decay_rate

<table>
<tr> <td> <b> Description </b> </td> <td> The decay rate used in GPS's decaying memory heuristic. Larger values mean information will be forgotten slowly, small values mean information will be forgotten quickly. Set this value to 0 if you believe that all of your algorithm's parameters interact strongly. Should be in [0, 0.5]. The default is 0.2 </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 0.2 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --decay-rate </code>, <code> --decay_rate </code>, <code> --decayRate </code> </td> </tr>
</table>

### minimum_runs

<table>
<tr> <td> <b> Description </b> </td> <td> The minimum number of run equivalents on which a configuration must be run before it can be accepted as a new incumbent. This is also the minimum number of run equivalents required before two configurations will be compared to each other using the permutation test. Configurations whose intersection of run equivalents is less than this number will be considered equal. Consequentially, brackets cannot be updated until at least this many runs have been performed for each configuration. Setting this number too large will delay or completely stop GPS from making any progress. However, setting it too small will allow GPS to make mistakes about the relative performance of two configurations with high probability. Ultimately the distribution of running times for your algorithm will impact what should be considered a good setting for you. If you can only afford to perform a single run of GPS, it is safest to set this parameter on the higher side: perhaps 10-25 (provided you can afford to at least thousands of target algorithm runs). Otherwise, 5-10 may be reasonable. Should be at least 5. The default is 5. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 5 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --minimum-runs </code>, <code> --minimum_runs </code>, <code> --minimumRuns </code>, <code> --min-runs </code>, <code> --min_runs </code>, <code> --minRuns </code>, <code> --minimum-run-equivalents </code>, <code> --minimum_run_equivalents </code>, <code> --minimumRunEquivalents </code>, <code> --min-run-equivalents </code>, <code> --min_run_equivalents </code>, <code> --minRunEquivalents </code>, <code> --minimum-instances </code>, <code> --minimum_instances </code>, <code> --minimumInstances </code>, <code> --min-instances </code>, <code> --min_instances </code>, <code> --minInstances </code> </td> </tr>
</table>

### alpha

<table>
<tr> <td> <b> Description </b> </td> <td> The significance level used in the permutation test to determine whether or not one configuration is better than another. Multiple test correction is not applied, so this is better viewed as a statistically-grounded heuristic than a true significance level. Setting this value too small will slow GPS's progress. Setting this value too high may allow GPS to make mistakes, which could potentially substantially adversely affect the final solution quality of the configurations found; however, it will allow GPS to move through the search space more quickly. If you can only afford to perform a single run of GPS, it is safest to set this parameter on the lower side: perhaps 0.01-0.05. Otherwise, you can experiment with larger values (say 0.1-0.25), which will increase the variance in the output of GPS. This parameter should be in (0,0.25). The default is 0.05. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 0.05 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --alpha </code>, <code> --significance-level </code>, <code> --significance_level </code>, <code> --significanceLevel </code> </td> </tr>
</table>

### post_process_incumbent

<table>
<tr> <td> <b> Description </b> </td> <td> GPS can make some mistakes. Most often, these will simply cause GPS to avoid high-quality regions of the configuration space. However, in the presence of parameter interactions some mistakes can cause GPS to return worse incumbents when given a larger budget. This is because GPS can update the incumbent to a configuration which has never been evaluated before. Given enough time, GPS should typically be able to recover from these situations. However, if the configuration run is terminated shortly after such an update, GPS may return a poor quality incumbent configuration. By enabling this feature, GPS will automatically post-process all of the recorded target algorithm runs and select the configuration which exhibits the best performance on the largest number of instances. This post processing is an experimental method for post-processing the output from one or more GPS runs to help protect against these kinds of mistakes made by GPS. However, preliminary results testing this method currently indicates that it typically decreases the performance of the incumbents returned by GPS. Should be 'True' or 'False'. The default is 'False'. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> False </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --post-process-incumbent </code>, <code> --post_process_incumbent </code>, <code> --postProcessIncumbent </code> </td> </tr>
</table>

### share_instance_order

<table>
<tr> <td> <b> Description </b> </td> <td> GPS randomizes the order in which the configurations are evaluated on instances. Each parameter search process can either share an instance ordering or not. In the original version of GPS the instance ordering was shared, but we suspect it will slightly improve the performance to do otherwise, so the default is False. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> False </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --share-instance-order </code>, <code> --share_instance_order </code>, <code> --shareInstanceOrder </code> </td> </tr>
</table>

## Redis Arguments

These arguments are required to configure GPS so that it connect to your redis server installation, which it uses to communicate between master and worker processes.

### redis_dbid

<table>
<tr> <td> <b> Description </b> </td> <td> The redis database ID number to be used by this instance of GPS. All workers of this GPS instance must be given this ID. Each GPS instance must have a unique database ID. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --redis-dbid </code>, <code> --redis_dbid </code>, <code> --redisDbid </code>, <code> --dbid </code> </td> </tr>
</table>

### redis_host

<table>
<tr> <td> <b> Description </b> </td> <td> The redis database host name. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --redis-host </code>, <code> --redis_host </code>, <code> --redisHost </code>, <code> --host </code> </td> </tr>
</table>

### redis_port

<table>
<tr> <td> <b> Description </b> </td> <td> The redis database port number. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> Yes </td> </tr>
<tr> <td> <b> Default </b> </td> <td> None </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --redis-port </code>, <code> --redis_port </code>, <code> --redisPort </code>, <code> --port </code> </td> </tr>
</table>

## Post-Process Parameters

GPS comes with a currently-undocumented post-processing procedure that can be used to post-process the output from one or more runs of GPS in order to extract the best configuration that has been evaluated on the largest number of instances. These are the parameters that control the behaviour of this procedure. If you perform multiple independent runs of GPS, but can not afford the time required to validate all of final incumbents, you may find this feature helpful. However, preliminary data suggests that using this procedure to post-process the output of a single GPS run harms the quality of the final configurations. Further study of this method is still required.

### post_process_multiple_test_correction

<table>
<tr> <td> <b> Description </b> </td> <td> Determines whether or not multiple test correction is used during GPS's optional incumbent post-processing procedure. Must be 'True' or 'False'. The default is 'True'. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> True </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --post-process-multiple-test-correction </code>, <code> --post_process_multiple_test_correction </code>, <code> --postProcessMultipleTestCorrection </code> </td> </tr>
</table>

### post_process_alpha

<table>
<tr> <td> <b> Description </b> </td> <td> The significance level used in the permutation tests performed during GPS's optional incumbent post-processing procedure. Unlike the alpha parameter used by GPS's main procedure, multiple test correction is enabled by default, so this can be viewed as the actual significance level of the statistical tests performed, rather than as a heuristic. As a result, it is not unreasonable to set the main alpha parameter to a larger value than this one -- especially if multiple independent runs of GPS are performed. Should be in (0, 0.25]. The default is 0.05.  </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 0.05 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --post-process-alpha </code>, <code> --post_process_alpha </code>, <code> --postProcessAlpha </code>, <code> --post-process-significance-level </code>, <code> --post_process_significance_level </code>, <code> --postProcessSignificanceLevel </code> </td> </tr>
</table>

### post_process_min_runs

<table>
<tr> <td> <b> Description </b> </td> <td> The minimum number of unique instances on which the intersection of the incumbent and a challenger must have been evaluated in order for a challenger to be considered in GPS's optional post-processing, incumbent-selection phase. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 5 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --post-process-min-runs </code>, <code> --post_process_min_runs </code>, <code> --postProcessMinRuns </code>, <code> --post-process-min-instances </code>, <code> --post_process_min_instances </code>, <code> --postProcessMinInstances </code> </td> </tr>
</table>

### post_process_n_permutations

<table>
<tr> <td> <b> Description </b> </td> <td> The number of permutations performed by the permutation test of the during GPS's optional incumbent post-processing procedure. Recommended to be at least 10000 to obtain stable permutation test results. Set it higher if you are using a smaller significance level or are performing the procedure on many combined, independent GPS runs, as the significance level will be smaller in such cases in order to perform multiple test correction. Must be a positive integer greater than 1000. The default is 10000. </td> </tr>
<tr> <td> <b> Required </b> </td> <td> No </td> </tr>
<tr> <td> <b> Default </b> </td> <td> 10000 </td> </tr>
<tr> <td> <b> Aliases </b> </td> <td> <code> --post-process-n-permutations </code>, <code> --post_process_n_permutations </code>, <code> --postProcessNPermutations </code>, <code> --post-process-number-of-permutations </code>, <code> --post_process_number_of_permutations </code>, <code> --postProcessNumberOfPermutations </code> </td> </tr>
</table>

